version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4

commands:

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:    
      workflow_id:
          type: string
          default: "${CIRCLECI_WORKFLOW_ID}"      
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -k "https://kvdb.io/4kiawDK2euCm4Mbq4JHknU/migration_<< parameters.workflow_id >>")
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi  


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>          

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-end-test]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: front-end-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-end-test]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-end-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout          
      - restore_cache:
          keys: [frontend-end-scan]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: frontend-end-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout         
      - restore_cache:
          keys: [backend-end-scan]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-end-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y gzip tar             
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                       
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt 
      - destroy-environment   

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
           fingerprints: ["e8:c6:8d:ad:08:e3:e1:9a:f9:1f:d7:79:a7:22:d4:f3"]
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc libffi-devel python3 epel-release && \
            yum install -y python3-pip && \
            yum install -y wget && \
            yum clean all && \
            yum update -y && \
            yum install -y tar gzip curl unzip openssh-server openssh-clients && \
            python3 -m pip install ansible

      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
     
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install --no-audit --no-fund
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            ls ~/
            if [[ 'has been executed successfully.' =~ $(grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt | uniq) ]]
            then
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl -k https://kvdb.io/4kiawDK2euCm4Mbq4JHknU/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d "1"  
            fi            

      # Here's where you will add some code to rollback on failure   
      - revert-migrations 

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            sudo apt update && \
            sudo apt install -y tar gzip curl

      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure    
      - destroy-environment  

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
       - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
           fingerprints: ["e8:c6:8d:ad:08:e3:e1:9a:f9:1f:d7:79:a7:22:d4:f3"]      
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible

      - restore_cache:
          keys: [backend-build]

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Deploy backend
          command: |
             cd backend
             npm i
             npm run build 
             cd ..
             # Zip the directory
             tar -C backend -czvf artifact.tar.gz .
             mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
             mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
             cd .circleci/ansible
             echo "Contents  of the inventory.txt file is -------"
             cat inventory.txt
             ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment

  smoke-test:
    docker:
       - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli nodejs npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicDnsName" \
            --output text)
            echo "${API_URL}"
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Backend smoke test.
          command: |
            if [[ 'ok' =~ $(curl -s --connect-timeout 5 http://${BACKEND_IP}:3030/api/status | grep -o ok) ]];then return 0 else return 1;fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi            
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar curl gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "${OldWorkflowID}" >> ~/OldWorkflowID.txt
            echo "${OldWorkflowID}"
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople            
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment    

cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |

              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              STACKSID=($(aws cloudformation describe-stacks --query "Stacks[*].Outputs[?OutputKey==\`ID\`].OutputValue" --no-paginate --output text))
              echo Stack ids: "${STACKSID[@]}"
              echo Stack names: "${STACKS[@]}"
              echo $OldWorkflowID ${CIRCLE_WORKFLOW_ID:0:7}  

              for i in "${STACKSID[@]}"
              do
                if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "$i" ]]
                then
                    echo "----------------Delete succeded-----------"
                    aws s3 rm "s3://udapeople-$i" --recursive
                    aws cloudformation delete-stack --stack-name "udapeople-frontend-$i"
                    aws cloudformation delete-stack --stack-name "udapeople-backend-$i"
                else
                    echo  "----------------Cleanup Failed------------"
                fi
              done
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]  
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]    
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]  
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]  
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]  
      - cleanup:
          requires: [cloudfront-update]                                                                   